package com.jobbrown.common.waterlevels;


/**
* com/jobbrown/common/waterlevels/SensorPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from waterlevels.idl
* Tuesday, April 28, 2015 7:35:32 PM BST
*/

public abstract class SensorPOA extends org.omg.PortableServer.Servant
 implements com.jobbrown.common.waterlevels.SensorOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getLog", new java.lang.Integer (0));
    _methods.put ("currentReading", new java.lang.Integer (1));
    _methods.put ("isFlooding", new java.lang.Integer (2));
    _methods.put ("checkAlarmStatus", new java.lang.Integer (3));
    _methods.put ("_get_id", new java.lang.Integer (4));
    _methods.put ("_set_id", new java.lang.Integer (5));
    _methods.put ("_get_name", new java.lang.Integer (6));
    _methods.put ("_set_name", new java.lang.Integer (7));
    _methods.put ("_get_zone", new java.lang.Integer (8));
    _methods.put ("_set_zone", new java.lang.Integer (9));
    _methods.put ("_get_waterLevel", new java.lang.Integer (10));
    _methods.put ("_set_waterLevel", new java.lang.Integer (11));
    _methods.put ("_get_alarmLevel", new java.lang.Integer (12));
    _methods.put ("_set_alarmLevel", new java.lang.Integer (13));
    _methods.put ("_get_active", new java.lang.Integer (14));
    _methods.put ("_set_active", new java.lang.Integer (15));
    _methods.put ("_get_readings", new java.lang.Integer (16));
    _methods.put ("_set_readings", new java.lang.Integer (17));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // WaterLevels/Sensor/getLog
       {
         String $result[] = null;
         $result = this.getLog ();
         out = $rh.createReply();
         com.jobbrown.common.waterlevels.LogHelper.write (out, $result);
         break;
       }

       case 1:  // WaterLevels/Sensor/currentReading
       {
         com.jobbrown.common.waterlevels.Reading $result = null;
         $result = this.currentReading ();
         out = $rh.createReply();
         com.jobbrown.common.waterlevels.ReadingHelper.write (out, $result);
         break;
       }

       case 2:  // WaterLevels/Sensor/isFlooding
       {
         boolean $result = false;
         $result = this.isFlooding ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 3:  // WaterLevels/Sensor/checkAlarmStatus
       {
         this.checkAlarmStatus ();
         out = $rh.createReply();
         break;
       }

       case 4:  // WaterLevels/Sensor/_get_id
       {
         int $result = (int)0;
         $result = this.id ();
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 5:  // WaterLevels/Sensor/_set_id
       {
         int newId = in.read_long ();
         this.id (newId);
         out = $rh.createReply();
         break;
       }

       case 6:  // WaterLevels/Sensor/_get_name
       {
         String $result = null;
         $result = this.name ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 7:  // WaterLevels/Sensor/_set_name
       {
         String newName = in.read_string ();
         this.name (newName);
         out = $rh.createReply();
         break;
       }

       case 8:  // WaterLevels/Sensor/_get_zone
       {
         String $result = null;
         $result = this.zone ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 9:  // WaterLevels/Sensor/_set_zone
       {
         String newZone = in.read_string ();
         this.zone (newZone);
         out = $rh.createReply();
         break;
       }

       case 10:  // WaterLevels/Sensor/_get_waterLevel
       {
         int $result = (int)0;
         $result = this.waterLevel ();
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 11:  // WaterLevels/Sensor/_set_waterLevel
       {
         int newWaterLevel = in.read_long ();
         this.waterLevel (newWaterLevel);
         out = $rh.createReply();
         break;
       }

       case 12:  // WaterLevels/Sensor/_get_alarmLevel
       {
         int $result = (int)0;
         $result = this.alarmLevel ();
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 13:  // WaterLevels/Sensor/_set_alarmLevel
       {
         int newAlarmLevel = in.read_long ();
         this.alarmLevel (newAlarmLevel);
         out = $rh.createReply();
         break;
       }

       case 14:  // WaterLevels/Sensor/_get_active
       {
         boolean $result = false;
         $result = this.active ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 15:  // WaterLevels/Sensor/_set_active
       {
         boolean newActive = in.read_boolean ();
         this.active (newActive);
         out = $rh.createReply();
         break;
       }

       case 16:  // WaterLevels/Sensor/_get_readings
       {
         com.jobbrown.common.waterlevels.Reading $result[] = null;
         $result = this.readings ();
         out = $rh.createReply();
         com.jobbrown.common.waterlevels.ReadingsHelper.write (out, $result);
         break;
       }

       case 17:  // WaterLevels/Sensor/_set_readings
       {
         com.jobbrown.common.waterlevels.Reading newReadings[] = com.jobbrown.common.waterlevels.ReadingsHelper.read (in);
         this.readings (newReadings);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:WaterLevels/Sensor:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Sensor _this() 
  {
    return SensorHelper.narrow(
    super._this_object());
  }

  public Sensor _this(org.omg.CORBA.ORB orb) 
  {
    return SensorHelper.narrow(
    super._this_object(orb));
  }


} // class SensorPOA
